/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets recipes */
        get: operations["getRecipes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets ingredients for a recipe */
        get: operations["getIngredientsByRecipe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppingitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets shopping list items */
        get: operations["getShoppingItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            /** Format: int32 */
            code?: number;
            type?: string;
            message?: string;
        };
        /** @enum {string} */
        Unit: Unit;
        /** @enum {string} */
        NutritionUnit: NutritionUnit;
        /** @enum {string} */
        NutritionType: NutritionType;
        /** @enum {string} */
        DurationType: DurationType;
        Duration: {
            durationType: components["schemas"]["DurationType"];
            /** Format: int32 */
            timeInMinutes: number;
        };
        IngredientGroup: {
            /** @description optional title for the ingredient group */
            title?: string;
            ingredients: components["schemas"]["Ingredient"][];
        };
        Ingredient: {
            product: components["schemas"]["Product"];
            /** Format: int32 */
            quantity: number;
            unit?: components["schemas"]["Unit"];
            /** @description Indicates an optional ingredient */
            optional?: boolean;
            note?: string;
        };
        Instruction: {
            /**
             * Format: int32
             * @description step number in the recipe
             */
            step: number;
            /** @description free form text which can include text substitutions for notes and ingredients */
            text: string;
        };
        Note: {
            /**
             * Format: int32
             * @description ordinal position relative to other notes
             */
            index: number;
            /** @description free form text which can include text substitutions for notes and ingredients */
            text: string;
        };
        NutritionInfo: {
            valueType?: components["schemas"]["NutritionType"];
            valueUnit?: components["schemas"]["NutritionUnit"];
            /** Format: double */
            value?: number;
            /** Format: double */
            percent?: number;
        };
        Review: {
            /** Format: int64 */
            id: number;
            reviewerId?: string;
            /** Format: int32 */
            Rating?: number;
            /** @description free form text for any reviewer comments */
            text?: string;
        };
        /** @enum {string} */
        RecipeComplexity: RecipeComplexity;
        /** @enum {string} */
        RecipeType: RecipeType;
        /** @enum {string} */
        Cuisine: Cuisine;
        /** @enum {string} */
        RecipeTag: RecipeTag;
        Product: {
            /** @description GUID for the recipe */
            id: string;
            /** @description stock keeping unit, e.g. barcode or other unique identifier */
            sku?: string;
            name: string;
            /** @description category of the product, e.g. fruit, vegetable, meat, poultry, dairy, etc. */
            category?: string;
            brand?: string;
            /**
             * Format: double
             * @description unit measurement for the product, e.g. 400 (grams) for a can of tomatoes
             */
            unitMeasurement?: number;
            measurementUnit?: components["schemas"]["Unit"];
            /**
             * Format: double
             * @description how much `measurementUnit` for one cup
             */
            cupEquivalent?: number;
            /** Format: int64 */
            shelfLifeInDays?: number;
        };
        Recipe: {
            /** @description GUID for the recipe */
            id: string;
            name: string;
            description?: string;
            imageUrls?: string[];
            /** @description either the individual creator or a corporate entity */
            creator?: string;
            /** @description license details explaining how the recipe may be used */
            license?: string;
            /** @description name of the source of the recipe, e.g. a website or a book */
            source?: string;
            /**
             * Format: uri
             * @description URL of the source of the recipe
             */
            sourceUrl?: string;
            /**
             * Format: date
             * @description date the recipe was published
             */
            datePublished?: string;
            /**
             * Format: date
             * @description date the recipe was last modified
             */
            dateModified?: string;
            /** Format: int32 */
            servings?: number;
            duration?: components["schemas"]["Duration"][];
            /** @description difficulty level of the recipe */
            complexity?: components["schemas"]["RecipeComplexity"];
            type?: components["schemas"]["RecipeType"];
            cuisine?: components["schemas"]["Cuisine"];
            tags?: components["schemas"]["RecipeTag"][];
            ingredientsGroups?: components["schemas"]["IngredientGroup"][];
            instructions?: components["schemas"]["Instruction"][];
            notes?: components["schemas"]["Note"][];
            nutritionInfoPerServe?: components["schemas"]["NutritionInfo"][];
            reviews?: components["schemas"]["Review"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getRecipes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"][];
                };
            };
        };
    };
    getIngredientsByRecipe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of recipe to return */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ingredient"][];
                };
            };
            /** @description Invalid ID supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getShoppingItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ingredient"][];
                };
            };
        };
    };
}
export enum Unit {
    tsp = "tsp",
    tbsp = "tbsp",
    dsp = "dsp",
    cup = "cup",
    mg = "mg",
    g = "g",
    kg = "kg",
    ml = "ml",
    l = "l",
    oz = "oz",
    lb = "lb",
    floz = "floz",
    pint = "pint",
    qt = "qt",
    gallon = "gallon",
    dash = "dash",
    pinch = "pinch",
    stick = "stick",
    slice = "slice",
    piece = "piece",
    clove = "clove",
    head = "head",
    sprig = "sprig",
    bunch = "bunch",
    stalk = "stalk",
    ear = "ear",
    pod = "pod",
    wedge = "wedge",
    flake = "flake",
    cube = "cube",
    chunk = "chunk"
}
export enum NutritionUnit {
    kilojoules = "kilojoules",
    calories = "calories",
    grams = "grams"
}
export enum NutritionType {
    carbohydrates = "carbohydrates",
    energy = "energy",
    protein = "protein",
    fat = "fat",
    fibre = "fibre",
    saturatedFat = "saturatedFat",
    saturates = "saturates",
    sodium = "sodium",
    sugar = "sugar",
    transFat = "transFat"
}
export enum DurationType {
    preparation = "preparation",
    cooking = "cooking",
    resting = "resting",
    cooling = "cooling",
    marinating = "marinating",
    freezing = "freezing",
    defrosting = "defrosting",
    serving = "serving",
    soaking = "soaking",
    baking = "baking",
    drying = "drying",
    fermenting = "fermenting",
    pickling = "pickling",
    brining = "brining",
    curing = "curing",
    chilling = "chilling",
    steeping = "steeping",
    infusion = "infusion"
}
export enum RecipeComplexity {
    beginner = "beginner",
    easy = "easy",
    intermediate = "intermediate",
    hard = "hard",
    expert = "expert"
}
export enum RecipeType {
    breakfast = "breakfast",
    brunch = "brunch",
    dessert = "dessert",
    drink = "drink",
    main = "main",
    preserve = "preserve",
    sauce = "sauce",
    side = "side",
    snack = "snack",
    starter = "starter",
    soup = "soup",
    pizza = "pizza"
}
export enum Cuisine {
    french = "french",
    british = "british",
    italian = "italian",
    spanish = "spanish",
    chinese = "chinese",
    japanese = "japanese",
    indian = "indian",
    thai = "thai",
    mexican = "mexican",
    american = "american",
    middleEastern = "middleEastern",
    african = "african"
}
export enum RecipeTag {
    dairyFree = "dairyFree",
    glutenFree = "glutenFree",
    nutFree = "nutFree",
    eggFree = "eggFree",
    freezable = "freezable",
    lowFodmap = "lowFodmap",
    keto = "keto",
    paleo = "paleo",
    fish = "fish",
    beef = "beef",
    lamb = "lamb",
    pork = "pork",
    goat = "goat",
    vegan = "vegan",
    vegetarian = "vegetarian"
}
